# Subscription vending machine
#
# * Identity needs permissions to create subscriptions
# * Build agent needs Azure DevOps permissions to create PRs
#
# Needs runtime variables:
# - azureRegion (short Azure region, e.g. uksouth/westeurope)
# - createSubscription (true/false)
# - managementGroupEnvironment (canary or prod - referring to MG hierarchy)
# - managementGroupName (name, not displayname)
# - workloadEnvironment (prod/dev/test - referring to workload classification)
# - subscriptionDisplayName
# - subscriptionOwnerIds (object IDs of sub owners, space seperated)
# - tags (myTag=MyVal myTag2=MyVal2) - tags with spaces should be in the form of "my tag=my val" "my tag2=my val2"
# - vnetAddressSpace (CIDR value for virtual network address space note: MUST ESCAPE THE SLASH, e.g. 10.1.1.0\/24)
#
# To run pipeline using az cli
#
# az pipelines run --id *** \
#                  --branch main \
#                  --variables createSubscription=false \
#                              azureRegion=westeurope \
#                              enrollmentAccountObjectId= \
#                              managementGroupEnvironment=canary \
#                              managementGroupName= \
#                              subscriptionDisplayName=MySub \
#                              subscriptionownerObjectIds= \
#                              tags="mytag=myval mytag2=myval2" \
#                              # note the double escape '\\' below, this is required for cli but only a single escape is needed in the web UI
#                              vnetAddressSpace="192.168.32.0\\/24" \
#                              workloadEnvironment= \
#
###############################################################################

trigger: none
name: subscription-vanding-machine
pool: terraform

variables:
  pipelineAadObjectId:
  skipComponentGovernanceDetection: true

steps:
- checkout: self
  persistCredentials: true

- script: |
    env | sort
  displayName: Echo input vars

- script: |
    az login --identity --allow-no-subscriptions
  displayName: az login with MSI

- script: |
    # Take the subscription owner inputs and construct a command line
    # in the form of "--owner-object-id xxx-yyy --owner-object-id aaa-bbb ..."
    # Make sure we add this pipeline's SPN to the subscription owner so we can tag it
    OWNERCMDLINE=" --owner-object-id $PIPELINEAADOBJECTID"
    for id in "${SUBSCRIPTIONOWNERIDS[@]}"; do OWNERCMDLINE="${OWNERCMDLINE} --owner-object-id $i"; done
    # Create the subscription
    SUB=$(az account create --enrollment-account-object-id $ENROLLMENTACCOUNTOBJECTID \
                             --offer-type $OFFERTYPE \
                             --display-name $SUBSCRIPTIONDISPLAYNAME \
                               $OWNERCMDLINE)
    # Check we have a valid JSON response back from the API
    SUB=$(echo $SUB | jq -re .subscriptionLink)
    echo "##vso[task.setvariable variable=subscriptionId]$(echo $SUB | cut -f3 -d/)"
  displayName: Create subscription
  condition: and(succeeded(), eq(variables['createSubscription'], 'true'))

- script: echo "##vso[task.setvariable variable=subscriptionId]b3158e43-005d-4f1d-a1e2-d14f1af7e210"
  displayName: Mock subscription creation (for testing pipeline)
  condition: and(succeeded(), eq(variables['createSubscription'], 'false'))

- script: |
    az tag create --resource-id /subscriptions/$(subscriptionId) --tags $(tags)
  displayName: Tag subscription
  condition: and(succeeded(), not(eq(variables['tags'], '')))

- script: |
    az devops configure --defaults organization=$(System.CollectionUri) project=$(System.TeamProject)
  displayName: Configure az devops defaults

- script: |
    git checkout -b subvend$(Build.BuildId)
  displayName: Create new branch

- script: |
    grep -si $SUBSCRIPTIONID sub2mg.csv || echo "$SUBSCRIPTIONID,$MANAGEMENTGROUPNAME" | tee -a sub2mg.csv
  displayName: Append new subscription to the sub2mg.csv file if it doesn't already exist
  condition: and(succeeded(),not(eq(variables['managementGroupName'], '')))

- script: |
    echo "Copy template file..."
    cp _TEMPLATE/lz_template.tf ./lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed subscription id..."
    sed -i s/SUBSCRIPTIONID/$SUBSCRIPTIONID/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed region..."
    sed -i s/REGION/$AZUREREGION/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed address space..."
    sed -i s/VNETADDRESSSPACE/$VNETADDRESSSPACE/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed environment..."
    sed -i s/MGENVIRONMENT/$managementGroupEnvironment/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed subdisplayname..."
    sed -i s/SUBSCRIPTIONDISPLAYNAME/$SUBSCRIPTIONDISPLAYNAME/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
    echo "sed workloadEnvironment..."
    sed -i s/WORKLOADENVIRONMENT/$WORKLOADENVIRONMENT/g lz_$(subscriptionId).$(managementGroupEnvironment).tf
  displayName: Create LZ Terraform config

- script: |
    git config --global user.email "auto.no-reply@azure.com"
    git config --global user.name "SubVendingPipeline"
  displayName: Set Git user details

- script: |
    git add lz_$(subscriptionId).$(managementGroupEnvironment).tf *.csv
    git commit -m 'New LZ: $(managementGroupEnvironment) $(subscriptionId)'
    git push --set-upstream origin subvend$(Build.BuildId)
  displayName: Git add, commit and push to origin

- script: |
    az repos pr create \
      --auto-complete false \
      --delete-source-branch true \
      --repository $(Build.Repository.Name) \
      --squash true \
      --title "New LZ: $(managementGroupEnvironment) $(subscriptionId)" \
      --source-branch subvend$(Build.BuildId) \
      --target-branch main
  displayName: Create PR
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
 